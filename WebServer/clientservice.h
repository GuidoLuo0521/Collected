/* clientservice.h
   Generated by wsdl2h 2.8.23 from http://ecg.koanruler.com:2081/StaticECGWebSite/WebService.asmx?WSDL and typemap.dat
   2021-04-13 01:17:24 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

   gSOAP XML Web services tools.
   Copyright (C) 2000-2015 Robert van Engelen, Genivia Inc. All Rights Reserved.
   Part of this software is released under one of the following licenses:
   GPL or Genivia's license for commercial use.
*/

/** @page page_notes Notes

@note HINTS:
 - Run soapcpp2 on clientservice.h to generate the SOAP/XML processing logic.
   Use soapcpp2 -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
   Use soapcpp2 -j to generate improved proxy and server classes.
 - Use wsdl2h -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h -R to generate REST operations.
 - Use wsdl2h -nname to use name as the base namespace prefix instead of 'ns'.
 - Use wsdl2h -Nname for service prefix and produce multiple service bindings
 - Use wsdl2h -d to enable DOM support for xsd:anyType.
 - Use wsdl2h -g to auto-generate readers and writers for root elements.
 - Use wsdl2h -b to auto-generate bi-directional operations (duplex ops).
 - Use wsdl2h -U to map XML names to C++ Unicode identifiers instead of _xNNNN.
 - Use wsdl2h -u to disable the generation of unions.
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

@warning
   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

@copyright LICENSE:
@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2015, Robert van Engelen, Genivia Inc. All Rights Reserved.

This software is released under one of the following licenses:
GPL or Genivia's license for commercial use.
--------------------------------------------------------------------------------
GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://StaticECG.koanruler.com/                                          *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

ns1 = "http://StaticECG.koanruler.com/"

*/

#define SOAP_NAMESPACE_OF_ns1	"http://StaticECG.koanruler.com/"
//gsoap ns1   schema namespace:	http://StaticECG.koanruler.com/
//gsoap ns1   schema elementForm:	qualified
//gsoap ns1   schema attributeForm:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/

/// Built-in XSD type "xs:base64Binary".
class xsd__base64Binary
{	unsigned char *__ptr;
	int __size;
	char *id, *type, *options; // NOTE: non-NULL for DIMEM/MIME/MTOM XOP attachments only
	struct soap *soap;
};


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/


//  Forward declaration of class ns1__AuthHeader.
class ns1__AuthHeader;

//  Forward declaration of class _ns1__GetReportState.
class _ns1__GetReportState;

//  Forward declaration of class _ns1__GetReportStateResponse.
class _ns1__GetReportStateResponse;

//  Forward declaration of class _ns1__Login.
class _ns1__Login;

//  Forward declaration of class _ns1__LoginResponse.
class _ns1__LoginResponse;

//  Forward declaration of class _ns1__SyncPatientInfo.
class _ns1__SyncPatientInfo;

//  Forward declaration of class _ns1__SyncPatientInfoResponse.
class _ns1__SyncPatientInfoResponse;

//  Forward declaration of class _ns1__UpdatePatientInfo.
class _ns1__UpdatePatientInfo;

//  Forward declaration of class _ns1__UpdatePatientInfoResponse.
class _ns1__UpdatePatientInfoResponse;

//  Forward declaration of class _ns1__SyncDataState.
class _ns1__SyncDataState;

//  Forward declaration of class _ns1__SyncDataStateResponse.
class _ns1__SyncDataStateResponse;

//  Forward declaration of class _ns1__UpdateDataState.
class _ns1__UpdateDataState;

//  Forward declaration of class _ns1__UpdateDataStateResponse.
class _ns1__UpdateDataStateResponse;

//  Forward declaration of class _ns1__SyncReportState.
class _ns1__SyncReportState;

//  Forward declaration of class _ns1__SyncReportStateResponse.
class _ns1__SyncReportStateResponse;

//  Forward declaration of class _ns1__UploadFile.
class _ns1__UploadFile;

//  Forward declaration of class _ns1__UploadFileResponse.
class _ns1__UploadFileResponse;

//  Forward declaration of class _ns1__GetQuery.
class _ns1__GetQuery;

//  Forward declaration of class _ns1__GetQueryResponse.
class _ns1__GetQueryResponse;

//  Forward declaration of class _ns1__UpdateQuery.
class _ns1__UpdateQuery;

//  Forward declaration of class _ns1__UpdateQueryResponse.
class _ns1__UpdateQueryResponse;


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://StaticECG.koanruler.com/                                          *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://StaticECG.koanruler.com/                                          *
 *                                                                            *
\******************************************************************************/

/// @brief "http://StaticECG.koanruler.com/":AuthHeader is a complexType.
///
/// class ns1__AuthHeader operations:
/// - soap_new_ns1__AuthHeader(soap*) allocate
/// - soap_new_ns1__AuthHeader(soap*, int num) allocate array
/// - soap_new_req_ns1__AuthHeader(soap*, ...) allocate, set required members
/// - soap_new_set_ns1__AuthHeader(soap*, ...) allocate, set all public members
/// - int soap_read_ns1__AuthHeader(soap*, ns1__AuthHeader*) deserialize from a stream
/// - int soap_write_ns1__AuthHeader(soap, ns1__AuthHeader*) serialize to a stream
class ns1__AuthHeader
{ public:
/// Element "authKey" of XSD type xs:string.
    char*                                authKey                        0;	///< Optional element.
/// @todo <anyAttribute namespace="##any">.
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
   @_XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://StaticECG.koanruler.com/":GetReportState
/// @brief "http://StaticECG.koanruler.com/":GetReportState is a complexType.
///
/// class _ns1__GetReportState operations:
/// - soap_new__ns1__GetReportState(soap*) allocate
/// - soap_new__ns1__GetReportState(soap*, int num) allocate array
/// - soap_new_req__ns1__GetReportState(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__GetReportState(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__GetReportState(soap*, _ns1__GetReportState*) deserialize from a stream
/// - int soap_write__ns1__GetReportState(soap, _ns1__GetReportState*) serialize to a stream
class _ns1__GetReportState
{ public:
/// Element "sFileName" of XSD type xs:string.
    char*                                sFileName                      0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://StaticECG.koanruler.com/":GetReportStateResponse
/// @brief "http://StaticECG.koanruler.com/":GetReportStateResponse is a complexType.
///
/// class _ns1__GetReportStateResponse operations:
/// - soap_new__ns1__GetReportStateResponse(soap*) allocate
/// - soap_new__ns1__GetReportStateResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__GetReportStateResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__GetReportStateResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__GetReportStateResponse(soap*, _ns1__GetReportStateResponse*) deserialize from a stream
/// - int soap_write__ns1__GetReportStateResponse(soap, _ns1__GetReportStateResponse*) serialize to a stream
class _ns1__GetReportStateResponse
{ public:
/// class _ns1__GetReportStateResponse_GetReportStateResult operations:
/// - soap_new__ns1__GetReportStateResponse_GetReportStateResult(soap*) allocate
/// - soap_new__ns1__GetReportStateResponse_GetReportStateResult(soap*, int num) allocate array
/// - soap_new_req__ns1__GetReportStateResponse_GetReportStateResult(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__GetReportStateResponse_GetReportStateResult(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__GetReportStateResponse_GetReportStateResult(soap*, _ns1__GetReportStateResponse_GetReportStateResult*) deserialize from a stream
/// - int soap_write__ns1__GetReportStateResponse_GetReportStateResult(soap, _ns1__GetReportStateResponse_GetReportStateResult*) serialize to a stream
    class _ns1__GetReportStateResponse_GetReportStateResult
    {
/// @todo <any namespace="##any">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
    _XML                                 __any                         0;	///< Catch any element content in XML string.
/// @todo This mixed complexType is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
    _XML                                 __mixed                       0;	///< Catch mixed content in XML string.
    }                                   *GetReportStateResult           0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://StaticECG.koanruler.com/":Login
/// @brief "http://StaticECG.koanruler.com/":Login is a complexType.
///
/// class _ns1__Login operations:
/// - soap_new__ns1__Login(soap*) allocate
/// - soap_new__ns1__Login(soap*, int num) allocate array
/// - soap_new_req__ns1__Login(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__Login(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__Login(soap*, _ns1__Login*) deserialize from a stream
/// - int soap_write__ns1__Login(soap, _ns1__Login*) serialize to a stream
class _ns1__Login
{ public:
/// Element "sAccount" of XSD type xs:string.
    char*                                sAccount                       0;	///< Optional element.
/// Element "sPassword" of XSD type xs:string.
    char*                                sPassword                      0;	///< Optional element.
/// Element "softdtmpad" of XSD type xs:string.
    char*                                softdtmpad                     0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://StaticECG.koanruler.com/":LoginResponse
/// @brief "http://StaticECG.koanruler.com/":LoginResponse is a complexType.
///
/// class _ns1__LoginResponse operations:
/// - soap_new__ns1__LoginResponse(soap*) allocate
/// - soap_new__ns1__LoginResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__LoginResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__LoginResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__LoginResponse(soap*, _ns1__LoginResponse*) deserialize from a stream
/// - int soap_write__ns1__LoginResponse(soap, _ns1__LoginResponse*) serialize to a stream
class _ns1__LoginResponse
{ public:
/// Element "LoginResult" of XSD type xs:string.
    char*                                LoginResult                    0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://StaticECG.koanruler.com/":SyncPatientInfo
/// @brief "http://StaticECG.koanruler.com/":SyncPatientInfo is a complexType.
///
/// class _ns1__SyncPatientInfo operations:
/// - soap_new__ns1__SyncPatientInfo(soap*) allocate
/// - soap_new__ns1__SyncPatientInfo(soap*, int num) allocate array
/// - soap_new_req__ns1__SyncPatientInfo(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__SyncPatientInfo(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__SyncPatientInfo(soap*, _ns1__SyncPatientInfo*) deserialize from a stream
/// - int soap_write__ns1__SyncPatientInfo(soap, _ns1__SyncPatientInfo*) serialize to a stream
class _ns1__SyncPatientInfo
{ public:
/// Element "nCheckStationID" of XSD type xs:string.
    char*                                nCheckStationID                0;	///< Optional element.
/// Element "sDatetime" of XSD type xs:string.
    char*                                sDatetime                      0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://StaticECG.koanruler.com/":SyncPatientInfoResponse
/// @brief "http://StaticECG.koanruler.com/":SyncPatientInfoResponse is a complexType.
///
/// class _ns1__SyncPatientInfoResponse operations:
/// - soap_new__ns1__SyncPatientInfoResponse(soap*) allocate
/// - soap_new__ns1__SyncPatientInfoResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__SyncPatientInfoResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__SyncPatientInfoResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__SyncPatientInfoResponse(soap*, _ns1__SyncPatientInfoResponse*) deserialize from a stream
/// - int soap_write__ns1__SyncPatientInfoResponse(soap, _ns1__SyncPatientInfoResponse*) serialize to a stream
class _ns1__SyncPatientInfoResponse
{ public:
/// Element "SyncPatientInfoResult" of XSD type xs:string.
    char*                                SyncPatientInfoResult          0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://StaticECG.koanruler.com/":UpdatePatientInfo
/// @brief "http://StaticECG.koanruler.com/":UpdatePatientInfo is a complexType.
///
/// class _ns1__UpdatePatientInfo operations:
/// - soap_new__ns1__UpdatePatientInfo(soap*) allocate
/// - soap_new__ns1__UpdatePatientInfo(soap*, int num) allocate array
/// - soap_new_req__ns1__UpdatePatientInfo(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__UpdatePatientInfo(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__UpdatePatientInfo(soap*, _ns1__UpdatePatientInfo*) deserialize from a stream
/// - int soap_write__ns1__UpdatePatientInfo(soap, _ns1__UpdatePatientInfo*) serialize to a stream
class _ns1__UpdatePatientInfo
{ public:
/// Element "sAccount" of XSD type xs:string.
    char*                                sAccount                       0;	///< Optional element.
/// Element "sjsonPatientInfo" of XSD type xs:string.
    char*                                sjsonPatientInfo               0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://StaticECG.koanruler.com/":UpdatePatientInfoResponse
/// @brief "http://StaticECG.koanruler.com/":UpdatePatientInfoResponse is a complexType.
///
/// class _ns1__UpdatePatientInfoResponse operations:
/// - soap_new__ns1__UpdatePatientInfoResponse(soap*) allocate
/// - soap_new__ns1__UpdatePatientInfoResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__UpdatePatientInfoResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__UpdatePatientInfoResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__UpdatePatientInfoResponse(soap*, _ns1__UpdatePatientInfoResponse*) deserialize from a stream
/// - int soap_write__ns1__UpdatePatientInfoResponse(soap, _ns1__UpdatePatientInfoResponse*) serialize to a stream
class _ns1__UpdatePatientInfoResponse
{ public:
/// Element "UpdatePatientInfoResult" of XSD type xs:string.
    char*                                UpdatePatientInfoResult        0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://StaticECG.koanruler.com/":SyncDataState
/// @brief "http://StaticECG.koanruler.com/":SyncDataState is a complexType.
///
/// class _ns1__SyncDataState operations:
/// - soap_new__ns1__SyncDataState(soap*) allocate
/// - soap_new__ns1__SyncDataState(soap*, int num) allocate array
/// - soap_new_req__ns1__SyncDataState(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__SyncDataState(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__SyncDataState(soap*, _ns1__SyncDataState*) deserialize from a stream
/// - int soap_write__ns1__SyncDataState(soap, _ns1__SyncDataState*) serialize to a stream
class _ns1__SyncDataState
{ public:
/// Element "nCheckStationID" of XSD type xs:string.
    char*                                nCheckStationID                0;	///< Optional element.
/// Element "sDatetime" of XSD type xs:string.
    char*                                sDatetime                      0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://StaticECG.koanruler.com/":SyncDataStateResponse
/// @brief "http://StaticECG.koanruler.com/":SyncDataStateResponse is a complexType.
///
/// class _ns1__SyncDataStateResponse operations:
/// - soap_new__ns1__SyncDataStateResponse(soap*) allocate
/// - soap_new__ns1__SyncDataStateResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__SyncDataStateResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__SyncDataStateResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__SyncDataStateResponse(soap*, _ns1__SyncDataStateResponse*) deserialize from a stream
/// - int soap_write__ns1__SyncDataStateResponse(soap, _ns1__SyncDataStateResponse*) serialize to a stream
class _ns1__SyncDataStateResponse
{ public:
/// Element "SyncDataStateResult" of XSD type xs:string.
    char*                                SyncDataStateResult            0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://StaticECG.koanruler.com/":UpdateDataState
/// @brief "http://StaticECG.koanruler.com/":UpdateDataState is a complexType.
///
/// class _ns1__UpdateDataState operations:
/// - soap_new__ns1__UpdateDataState(soap*) allocate
/// - soap_new__ns1__UpdateDataState(soap*, int num) allocate array
/// - soap_new_req__ns1__UpdateDataState(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__UpdateDataState(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__UpdateDataState(soap*, _ns1__UpdateDataState*) deserialize from a stream
/// - int soap_write__ns1__UpdateDataState(soap, _ns1__UpdateDataState*) serialize to a stream
class _ns1__UpdateDataState
{ public:
/// Element "nPersondataid" of XSD type xs:string.
    char*                                nPersondataid                  0;	///< Optional element.
/// Element "sFileName" of XSD type xs:string.
    char*                                sFileName                      0;	///< Optional element.
/// Element "sFileDesc" of XSD type xs:string.
    char*                                sFileDesc                      0;	///< Optional element.
/// Element "sOccurDtm" of XSD type xs:string.
    char*                                sOccurDtm                      0;	///< Optional element.
/// Element "lFileLength" of XSD type xs:string.
    char*                                lFileLength                    0;	///< Optional element.
/// Element "lDataFrom" of XSD type xs:string.
    char*                                lDataFrom                      0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://StaticECG.koanruler.com/":UpdateDataStateResponse
/// @brief "http://StaticECG.koanruler.com/":UpdateDataStateResponse is a complexType.
///
/// class _ns1__UpdateDataStateResponse operations:
/// - soap_new__ns1__UpdateDataStateResponse(soap*) allocate
/// - soap_new__ns1__UpdateDataStateResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__UpdateDataStateResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__UpdateDataStateResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__UpdateDataStateResponse(soap*, _ns1__UpdateDataStateResponse*) deserialize from a stream
/// - int soap_write__ns1__UpdateDataStateResponse(soap, _ns1__UpdateDataStateResponse*) serialize to a stream
class _ns1__UpdateDataStateResponse
{ public:
/// Element "UpdateDataStateResult" of XSD type xs:string.
    char*                                UpdateDataStateResult          0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://StaticECG.koanruler.com/":SyncReportState
/// @brief "http://StaticECG.koanruler.com/":SyncReportState is a complexType.
///
/// class _ns1__SyncReportState operations:
/// - soap_new__ns1__SyncReportState(soap*) allocate
/// - soap_new__ns1__SyncReportState(soap*, int num) allocate array
/// - soap_new_req__ns1__SyncReportState(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__SyncReportState(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__SyncReportState(soap*, _ns1__SyncReportState*) deserialize from a stream
/// - int soap_write__ns1__SyncReportState(soap, _ns1__SyncReportState*) serialize to a stream
class _ns1__SyncReportState
{ public:
/// Element "nCheckStationID" of XSD type xs:string.
    char*                                nCheckStationID                0;	///< Optional element.
/// Element "starthandledtm" of XSD type xs:string.
    char*                                starthandledtm                 0;	///< Optional element.
/// Element "endhandledtm" of XSD type xs:string.
    char*                                endhandledtm                   0;	///< Optional element.
/// Element "reportcollectdtm" of XSD type xs:string.
    char*                                reportcollectdtm               0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://StaticECG.koanruler.com/":SyncReportStateResponse
/// @brief "http://StaticECG.koanruler.com/":SyncReportStateResponse is a complexType.
///
/// class _ns1__SyncReportStateResponse operations:
/// - soap_new__ns1__SyncReportStateResponse(soap*) allocate
/// - soap_new__ns1__SyncReportStateResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__SyncReportStateResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__SyncReportStateResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__SyncReportStateResponse(soap*, _ns1__SyncReportStateResponse*) deserialize from a stream
/// - int soap_write__ns1__SyncReportStateResponse(soap, _ns1__SyncReportStateResponse*) serialize to a stream
class _ns1__SyncReportStateResponse
{ public:
/// Element "SyncReportStateResult" of XSD type xs:string.
    char*                                SyncReportStateResult          0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://StaticECG.koanruler.com/":UploadFile
/// @brief "http://StaticECG.koanruler.com/":UploadFile is a complexType.
///
/// class _ns1__UploadFile operations:
/// - soap_new__ns1__UploadFile(soap*) allocate
/// - soap_new__ns1__UploadFile(soap*, int num) allocate array
/// - soap_new_req__ns1__UploadFile(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__UploadFile(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__UploadFile(soap*, _ns1__UploadFile*) deserialize from a stream
/// - int soap_write__ns1__UploadFile(soap, _ns1__UploadFile*) serialize to a stream
class _ns1__UploadFile
{ public:
/// Element "persondataid" of XSD type xs:string.
    char*                                persondataid                   0;	///< Optional element.
/// Element "sFileName" of XSD type xs:string.
    char*                                sFileName                      0;	///< Optional element.
/// Element "pFileContent" of XSD type xs:base64Binary.
    xsd__base64Binary*                   pFileContent                   0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://StaticECG.koanruler.com/":UploadFileResponse
/// @brief "http://StaticECG.koanruler.com/":UploadFileResponse is a complexType.
///
/// class _ns1__UploadFileResponse operations:
/// - soap_new__ns1__UploadFileResponse(soap*) allocate
/// - soap_new__ns1__UploadFileResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__UploadFileResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__UploadFileResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__UploadFileResponse(soap*, _ns1__UploadFileResponse*) deserialize from a stream
/// - int soap_write__ns1__UploadFileResponse(soap, _ns1__UploadFileResponse*) serialize to a stream
class _ns1__UploadFileResponse
{ public:
/// Element "UploadFileResult" of XSD type xs:string.
    char*                                UploadFileResult               0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://StaticECG.koanruler.com/":GetQuery
/// @brief "http://StaticECG.koanruler.com/":GetQuery is a complexType.
///
/// class _ns1__GetQuery operations:
/// - soap_new__ns1__GetQuery(soap*) allocate
/// - soap_new__ns1__GetQuery(soap*, int num) allocate array
/// - soap_new_req__ns1__GetQuery(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__GetQuery(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__GetQuery(soap*, _ns1__GetQuery*) deserialize from a stream
/// - int soap_write__ns1__GetQuery(soap, _ns1__GetQuery*) serialize to a stream
class _ns1__GetQuery
{ public:
/// Element "sql" of XSD type xs:string.
    char*                                sql                            0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://StaticECG.koanruler.com/":GetQueryResponse
/// @brief "http://StaticECG.koanruler.com/":GetQueryResponse is a complexType.
///
/// class _ns1__GetQueryResponse operations:
/// - soap_new__ns1__GetQueryResponse(soap*) allocate
/// - soap_new__ns1__GetQueryResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__GetQueryResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__GetQueryResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__GetQueryResponse(soap*, _ns1__GetQueryResponse*) deserialize from a stream
/// - int soap_write__ns1__GetQueryResponse(soap, _ns1__GetQueryResponse*) serialize to a stream
class _ns1__GetQueryResponse
{ public:
/// class _ns1__GetQueryResponse_GetQueryResult operations:
/// - soap_new__ns1__GetQueryResponse_GetQueryResult(soap*) allocate
/// - soap_new__ns1__GetQueryResponse_GetQueryResult(soap*, int num) allocate array
/// - soap_new_req__ns1__GetQueryResponse_GetQueryResult(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__GetQueryResponse_GetQueryResult(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__GetQueryResponse_GetQueryResult(soap*, _ns1__GetQueryResponse_GetQueryResult*) deserialize from a stream
/// - int soap_write__ns1__GetQueryResponse_GetQueryResult(soap, _ns1__GetQueryResponse_GetQueryResult*) serialize to a stream
    class _ns1__GetQueryResponse_GetQueryResult
    {
/// @todo <any namespace="##any">
/// @todo Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
    _XML                                 __any                         0;	///< Catch any element content in XML string.
/// @todo This mixed complexType is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element).
    _XML                                 __mixed                       0;	///< Catch mixed content in XML string.
    }                                   *GetQueryResult                 0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://StaticECG.koanruler.com/":UpdateQuery
/// @brief "http://StaticECG.koanruler.com/":UpdateQuery is a complexType.
///
/// class _ns1__UpdateQuery operations:
/// - soap_new__ns1__UpdateQuery(soap*) allocate
/// - soap_new__ns1__UpdateQuery(soap*, int num) allocate array
/// - soap_new_req__ns1__UpdateQuery(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__UpdateQuery(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__UpdateQuery(soap*, _ns1__UpdateQuery*) deserialize from a stream
/// - int soap_write__ns1__UpdateQuery(soap, _ns1__UpdateQuery*) serialize to a stream
class _ns1__UpdateQuery
{ public:
/// Element "sql" of XSD type xs:string.
    char*                                sql                            0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://StaticECG.koanruler.com/":UpdateQueryResponse
/// @brief "http://StaticECG.koanruler.com/":UpdateQueryResponse is a complexType.
///
/// class _ns1__UpdateQueryResponse operations:
/// - soap_new__ns1__UpdateQueryResponse(soap*) allocate
/// - soap_new__ns1__UpdateQueryResponse(soap*, int num) allocate array
/// - soap_new_req__ns1__UpdateQueryResponse(soap*, ...) allocate, set required members
/// - soap_new_set__ns1__UpdateQueryResponse(soap*, ...) allocate, set all public members
/// - int soap_read__ns1__UpdateQueryResponse(soap*, _ns1__UpdateQueryResponse*) deserialize from a stream
/// - int soap_write__ns1__UpdateQueryResponse(soap, _ns1__UpdateQueryResponse*) serialize to a stream
class _ns1__UpdateQueryResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set).
    struct soap                         *soap                          ;
};


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://StaticECG.koanruler.com/                                          *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://StaticECG.koanruler.com/":AuthHeader of XSD type "http://StaticECG.koanruler.com/":AuthHeader.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://StaticECG.koanruler.com/                                          *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/

// This service supports SOAP 1.2 namespaces:
#import "soap12.h"

//gsoap ns1  service name:	WebServiceSoap 
//gsoap ns1  service type:	WebServiceSoap 
//gsoap ns1  service port:	http://ecg.koanruler.com:2081/StaticECGWebSite/WebService.asmx 
//gsoap ns1  service namespace:	http://StaticECG.koanruler.com/ 
//gsoap ns1  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage Service Definitions

@section Service_bindings Service Bindings

  - @ref WebServiceSoap

@section Service_more More Information

  - @ref page_notes "Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page WebServiceSoap Binding "WebServiceSoap"

@section WebServiceSoap_operations Operations of Binding "WebServiceSoap"

  - @ref __ns1__GetReportState

  - @ref __ns1__Login

  - @ref __ns1__SyncPatientInfo

  - @ref __ns1__UpdatePatientInfo

  - @ref __ns1__SyncDataState

  - @ref __ns1__UpdateDataState

  - @ref __ns1__SyncReportState

  - @ref __ns1__UploadFile

  - @ref __ns1__GetQuery

  - @ref __ns1__UpdateQuery

  - @ref __ns1__GetReportState_

  - @ref __ns1__Login_

  - @ref __ns1__SyncPatientInfo_

  - @ref __ns1__UpdatePatientInfo_

  - @ref __ns1__SyncDataState_

  - @ref __ns1__UpdateDataState_

  - @ref __ns1__SyncReportState_

  - @ref __ns1__UploadFile_

  - @ref __ns1__GetQuery_

  - @ref __ns1__UpdateQuery_

@section WebServiceSoap_ports Endpoints of Binding "WebServiceSoap"

  - http://ecg.koanruler.com:2081/StaticECGWebSite/WebService.asmx

@note Multiple service bindings collected as one, use wsdl2h option -Nname to produce a separate service for each binding


*/

/******************************************************************************\
 *                                                                            *
 * SOAP Header                                                                *
 *                                                                            *
\******************************************************************************/

/**

The SOAP Header is part of the gSOAP context and its content is accessed
through the soap.header variable. You may have to set the soap.actor variable
to serialize SOAP Headers with SOAP-ENV:actor or SOAP-ENV:role attributes.
Use option -j to remove entire SOAP Header definition.
Use option -k to remove the mustUnderstand qualifiers.

*/
struct SOAP_ENV__Header
{
    mustUnderstand                       // must be understood by receiver
/// "AuthHeader" SOAP Header part element.
    ns1__AuthHeader*                     ns1__AuthHeader_              ;

};


/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   WebServiceSoap                                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetReportState                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetReportState" of service binding "WebServiceSoap".
 pad

  - SOAP document/literal style messaging

  - Action: "http://StaticECG.koanruler.com/GetReportState"

  - Addressing input action: "http://StaticECG.koanruler.com/GetReportState"

  - Addressing output action: "http://StaticECG.koanruler.com/GetReportStateResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetReportState(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetReportState*               ns1__GetReportState,
    // output parameters:
    _ns1__GetReportStateResponse       &ns1__GetReportStateResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetReportState(
    struct soap *soap,
    // input parameters:
    _ns1__GetReportState*               ns1__GetReportState,
    // output parameters:
    _ns1__GetReportStateResponse       &ns1__GetReportStateResponse
  );
@endcode

C++ proxy class (defined in soapWebServiceSoapProxy.h):
@code
  class WebServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWebServiceSoapService.h):
@code
  class WebServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetReportState SOAP
//gsoap ns1  service method-style:	GetReportState document
//gsoap ns1  service method-encoding:	GetReportState literal
//gsoap ns1  service method-input-action:	GetReportState http://StaticECG.koanruler.com/GetReportState
//gsoap ns1  service method-output-action:	GetReportState http://StaticECG.koanruler.com/GetReportStateResponse
int __ns1__GetReportState(
    _ns1__GetReportState*               ns1__GetReportState,	///< Input parameter
    _ns1__GetReportStateResponse       &ns1__GetReportStateResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__Login                                                             *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__Login" of service binding "WebServiceSoap".


  - SOAP document/literal style messaging

  - Action: "http://StaticECG.koanruler.com/Login"

  - Addressing input action: "http://StaticECG.koanruler.com/Login"

  - Addressing output action: "http://StaticECG.koanruler.com/LoginResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__Login(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__Login*                        ns1__Login,
    // output parameters:
    _ns1__LoginResponse                &ns1__LoginResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__Login(
    struct soap *soap,
    // input parameters:
    _ns1__Login*                        ns1__Login,
    // output parameters:
    _ns1__LoginResponse                &ns1__LoginResponse
  );
@endcode

C++ proxy class (defined in soapWebServiceSoapProxy.h):
@code
  class WebServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWebServiceSoapService.h):
@code
  class WebServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	Login SOAP
//gsoap ns1  service method-style:	Login document
//gsoap ns1  service method-encoding:	Login literal
//gsoap ns1  service method-input-action:	Login http://StaticECG.koanruler.com/Login
//gsoap ns1  service method-output-action:	Login http://StaticECG.koanruler.com/LoginResponse
int __ns1__Login(
    _ns1__Login*                        ns1__Login,	///< Input parameter
    _ns1__LoginResponse                &ns1__LoginResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SyncPatientInfo                                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__SyncPatientInfo" of service binding "WebServiceSoap".


  - SOAP document/literal style messaging

  - Action: "http://StaticECG.koanruler.com/SyncPatientInfo"

  - Addressing input action: "http://StaticECG.koanruler.com/SyncPatientInfo"

  - Addressing output action: "http://StaticECG.koanruler.com/SyncPatientInfoResponse"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns1__AuthHeader_

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SyncPatientInfo(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__SyncPatientInfo*              ns1__SyncPatientInfo,
    // output parameters:
    _ns1__SyncPatientInfoResponse      &ns1__SyncPatientInfoResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SyncPatientInfo(
    struct soap *soap,
    // input parameters:
    _ns1__SyncPatientInfo*              ns1__SyncPatientInfo,
    // output parameters:
    _ns1__SyncPatientInfoResponse      &ns1__SyncPatientInfoResponse
  );
@endcode

C++ proxy class (defined in soapWebServiceSoapProxy.h):
@code
  class WebServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWebServiceSoapService.h):
@code
  class WebServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	SyncPatientInfo SOAP
//gsoap ns1  service method-style:	SyncPatientInfo document
//gsoap ns1  service method-encoding:	SyncPatientInfo literal
//gsoap ns1  service method-input-action:	SyncPatientInfo http://StaticECG.koanruler.com/SyncPatientInfo
//gsoap ns1  service method-output-action:	SyncPatientInfo http://StaticECG.koanruler.com/SyncPatientInfoResponse
//gsoap ns1  service method-input-header-part:	SyncPatientInfo ns1__AuthHeader_
int __ns1__SyncPatientInfo(
    _ns1__SyncPatientInfo*              ns1__SyncPatientInfo,	///< Input parameter
    _ns1__SyncPatientInfoResponse      &ns1__SyncPatientInfoResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__UpdatePatientInfo                                                 *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__UpdatePatientInfo" of service binding "WebServiceSoap".


  - SOAP document/literal style messaging

  - Action: "http://StaticECG.koanruler.com/UpdatePatientInfo"

  - Addressing input action: "http://StaticECG.koanruler.com/UpdatePatientInfo"

  - Addressing output action: "http://StaticECG.koanruler.com/UpdatePatientInfoResponse"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns1__AuthHeader_

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__UpdatePatientInfo(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__UpdatePatientInfo*            ns1__UpdatePatientInfo,
    // output parameters:
    _ns1__UpdatePatientInfoResponse    &ns1__UpdatePatientInfoResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__UpdatePatientInfo(
    struct soap *soap,
    // input parameters:
    _ns1__UpdatePatientInfo*            ns1__UpdatePatientInfo,
    // output parameters:
    _ns1__UpdatePatientInfoResponse    &ns1__UpdatePatientInfoResponse
  );
@endcode

C++ proxy class (defined in soapWebServiceSoapProxy.h):
@code
  class WebServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWebServiceSoapService.h):
@code
  class WebServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	UpdatePatientInfo SOAP
//gsoap ns1  service method-style:	UpdatePatientInfo document
//gsoap ns1  service method-encoding:	UpdatePatientInfo literal
//gsoap ns1  service method-input-action:	UpdatePatientInfo http://StaticECG.koanruler.com/UpdatePatientInfo
//gsoap ns1  service method-output-action:	UpdatePatientInfo http://StaticECG.koanruler.com/UpdatePatientInfoResponse
//gsoap ns1  service method-input-header-part:	UpdatePatientInfo ns1__AuthHeader_
int __ns1__UpdatePatientInfo(
    _ns1__UpdatePatientInfo*            ns1__UpdatePatientInfo,	///< Input parameter
    _ns1__UpdatePatientInfoResponse    &ns1__UpdatePatientInfoResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SyncDataState                                                     *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__SyncDataState" of service binding "WebServiceSoap".


  - SOAP document/literal style messaging

  - Action: "http://StaticECG.koanruler.com/SyncDataState"

  - Addressing input action: "http://StaticECG.koanruler.com/SyncDataState"

  - Addressing output action: "http://StaticECG.koanruler.com/SyncDataStateResponse"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns1__AuthHeader_

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SyncDataState(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__SyncDataState*                ns1__SyncDataState,
    // output parameters:
    _ns1__SyncDataStateResponse        &ns1__SyncDataStateResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SyncDataState(
    struct soap *soap,
    // input parameters:
    _ns1__SyncDataState*                ns1__SyncDataState,
    // output parameters:
    _ns1__SyncDataStateResponse        &ns1__SyncDataStateResponse
  );
@endcode

C++ proxy class (defined in soapWebServiceSoapProxy.h):
@code
  class WebServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWebServiceSoapService.h):
@code
  class WebServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	SyncDataState SOAP
//gsoap ns1  service method-style:	SyncDataState document
//gsoap ns1  service method-encoding:	SyncDataState literal
//gsoap ns1  service method-input-action:	SyncDataState http://StaticECG.koanruler.com/SyncDataState
//gsoap ns1  service method-output-action:	SyncDataState http://StaticECG.koanruler.com/SyncDataStateResponse
//gsoap ns1  service method-input-header-part:	SyncDataState ns1__AuthHeader_
int __ns1__SyncDataState(
    _ns1__SyncDataState*                ns1__SyncDataState,	///< Input parameter
    _ns1__SyncDataStateResponse        &ns1__SyncDataStateResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__UpdateDataState                                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__UpdateDataState" of service binding "WebServiceSoap".


  - SOAP document/literal style messaging

  - Action: "http://StaticECG.koanruler.com/UpdateDataState"

  - Addressing input action: "http://StaticECG.koanruler.com/UpdateDataState"

  - Addressing output action: "http://StaticECG.koanruler.com/UpdateDataStateResponse"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns1__AuthHeader_

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__UpdateDataState(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__UpdateDataState*              ns1__UpdateDataState,
    // output parameters:
    _ns1__UpdateDataStateResponse      &ns1__UpdateDataStateResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__UpdateDataState(
    struct soap *soap,
    // input parameters:
    _ns1__UpdateDataState*              ns1__UpdateDataState,
    // output parameters:
    _ns1__UpdateDataStateResponse      &ns1__UpdateDataStateResponse
  );
@endcode

C++ proxy class (defined in soapWebServiceSoapProxy.h):
@code
  class WebServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWebServiceSoapService.h):
@code
  class WebServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	UpdateDataState SOAP
//gsoap ns1  service method-style:	UpdateDataState document
//gsoap ns1  service method-encoding:	UpdateDataState literal
//gsoap ns1  service method-input-action:	UpdateDataState http://StaticECG.koanruler.com/UpdateDataState
//gsoap ns1  service method-output-action:	UpdateDataState http://StaticECG.koanruler.com/UpdateDataStateResponse
//gsoap ns1  service method-input-header-part:	UpdateDataState ns1__AuthHeader_
int __ns1__UpdateDataState(
    _ns1__UpdateDataState*              ns1__UpdateDataState,	///< Input parameter
    _ns1__UpdateDataStateResponse      &ns1__UpdateDataStateResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SyncReportState                                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__SyncReportState" of service binding "WebServiceSoap".


  - SOAP document/literal style messaging

  - Action: "http://StaticECG.koanruler.com/SyncReportState"

  - Addressing input action: "http://StaticECG.koanruler.com/SyncReportState"

  - Addressing output action: "http://StaticECG.koanruler.com/SyncReportStateResponse"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns1__AuthHeader_

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SyncReportState(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__SyncReportState*              ns1__SyncReportState,
    // output parameters:
    _ns1__SyncReportStateResponse      &ns1__SyncReportStateResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SyncReportState(
    struct soap *soap,
    // input parameters:
    _ns1__SyncReportState*              ns1__SyncReportState,
    // output parameters:
    _ns1__SyncReportStateResponse      &ns1__SyncReportStateResponse
  );
@endcode

C++ proxy class (defined in soapWebServiceSoapProxy.h):
@code
  class WebServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWebServiceSoapService.h):
@code
  class WebServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	SyncReportState SOAP
//gsoap ns1  service method-style:	SyncReportState document
//gsoap ns1  service method-encoding:	SyncReportState literal
//gsoap ns1  service method-input-action:	SyncReportState http://StaticECG.koanruler.com/SyncReportState
//gsoap ns1  service method-output-action:	SyncReportState http://StaticECG.koanruler.com/SyncReportStateResponse
//gsoap ns1  service method-input-header-part:	SyncReportState ns1__AuthHeader_
int __ns1__SyncReportState(
    _ns1__SyncReportState*              ns1__SyncReportState,	///< Input parameter
    _ns1__SyncReportStateResponse      &ns1__SyncReportStateResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__UploadFile                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__UploadFile" of service binding "WebServiceSoap".


  - SOAP document/literal style messaging

  - Action: "http://StaticECG.koanruler.com/UploadFile"

  - Addressing input action: "http://StaticECG.koanruler.com/UploadFile"

  - Addressing output action: "http://StaticECG.koanruler.com/UploadFileResponse"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns1__AuthHeader_

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__UploadFile(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__UploadFile*                   ns1__UploadFile,
    // output parameters:
    _ns1__UploadFileResponse           &ns1__UploadFileResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__UploadFile(
    struct soap *soap,
    // input parameters:
    _ns1__UploadFile*                   ns1__UploadFile,
    // output parameters:
    _ns1__UploadFileResponse           &ns1__UploadFileResponse
  );
@endcode

C++ proxy class (defined in soapWebServiceSoapProxy.h):
@code
  class WebServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWebServiceSoapService.h):
@code
  class WebServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	UploadFile SOAP
//gsoap ns1  service method-style:	UploadFile document
//gsoap ns1  service method-encoding:	UploadFile literal
//gsoap ns1  service method-input-action:	UploadFile http://StaticECG.koanruler.com/UploadFile
//gsoap ns1  service method-output-action:	UploadFile http://StaticECG.koanruler.com/UploadFileResponse
//gsoap ns1  service method-input-header-part:	UploadFile ns1__AuthHeader_
int __ns1__UploadFile(
    _ns1__UploadFile*                   ns1__UploadFile,	///< Input parameter
    _ns1__UploadFileResponse           &ns1__UploadFileResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetQuery                                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetQuery" of service binding "WebServiceSoap".
 PC

  - SOAP document/literal style messaging

  - Action: "http://StaticECG.koanruler.com/GetQuery"

  - Addressing input action: "http://StaticECG.koanruler.com/GetQuery"

  - Addressing output action: "http://StaticECG.koanruler.com/GetQueryResponse"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns1__AuthHeader_

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetQuery(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetQuery*                     ns1__GetQuery,
    // output parameters:
    _ns1__GetQueryResponse             &ns1__GetQueryResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetQuery(
    struct soap *soap,
    // input parameters:
    _ns1__GetQuery*                     ns1__GetQuery,
    // output parameters:
    _ns1__GetQueryResponse             &ns1__GetQueryResponse
  );
@endcode

C++ proxy class (defined in soapWebServiceSoapProxy.h):
@code
  class WebServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWebServiceSoapService.h):
@code
  class WebServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetQuery SOAP
//gsoap ns1  service method-style:	GetQuery document
//gsoap ns1  service method-encoding:	GetQuery literal
//gsoap ns1  service method-input-action:	GetQuery http://StaticECG.koanruler.com/GetQuery
//gsoap ns1  service method-output-action:	GetQuery http://StaticECG.koanruler.com/GetQueryResponse
//gsoap ns1  service method-input-header-part:	GetQuery ns1__AuthHeader_
int __ns1__GetQuery(
    _ns1__GetQuery*                     ns1__GetQuery,	///< Input parameter
    _ns1__GetQueryResponse             &ns1__GetQueryResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__UpdateQuery                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__UpdateQuery" of service binding "WebServiceSoap".
 PC

  - SOAP document/literal style messaging

  - Action: "http://StaticECG.koanruler.com/UpdateQuery"

  - Addressing input action: "http://StaticECG.koanruler.com/UpdateQuery"

  - Addressing output action: "http://StaticECG.koanruler.com/UpdateQueryResponse"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns1__AuthHeader_

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__UpdateQuery(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__UpdateQuery*                  ns1__UpdateQuery,
    // output parameters:
    _ns1__UpdateQueryResponse          &ns1__UpdateQueryResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__UpdateQuery(
    struct soap *soap,
    // input parameters:
    _ns1__UpdateQuery*                  ns1__UpdateQuery,
    // output parameters:
    _ns1__UpdateQueryResponse          &ns1__UpdateQueryResponse
  );
@endcode

C++ proxy class (defined in soapWebServiceSoapProxy.h):
@code
  class WebServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWebServiceSoapService.h):
@code
  class WebServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	UpdateQuery SOAP
//gsoap ns1  service method-style:	UpdateQuery document
//gsoap ns1  service method-encoding:	UpdateQuery literal
//gsoap ns1  service method-input-action:	UpdateQuery http://StaticECG.koanruler.com/UpdateQuery
//gsoap ns1  service method-output-action:	UpdateQuery http://StaticECG.koanruler.com/UpdateQueryResponse
//gsoap ns1  service method-input-header-part:	UpdateQuery ns1__AuthHeader_
int __ns1__UpdateQuery(
    _ns1__UpdateQuery*                  ns1__UpdateQuery,	///< Input parameter
    _ns1__UpdateQueryResponse          &ns1__UpdateQueryResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetReportState_                                                   *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetReportState_" of service binding "WebServiceSoap".
 pad

  - SOAP document/literal style messaging

  - Action: "http://StaticECG.koanruler.com/GetReportState"

  - Addressing input action: "http://StaticECG.koanruler.com/GetReportState"

  - Addressing output action: "http://StaticECG.koanruler.com/GetReportStateResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetReportState_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetReportState*               ns1__GetReportState,
    // output parameters:
    _ns1__GetReportStateResponse       &ns1__GetReportStateResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetReportState_(
    struct soap *soap,
    // input parameters:
    _ns1__GetReportState*               ns1__GetReportState,
    // output parameters:
    _ns1__GetReportStateResponse       &ns1__GetReportStateResponse
  );
@endcode

C++ proxy class (defined in soapWebServiceSoapProxy.h):
@code
  class WebServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWebServiceSoapService.h):
@code
  class WebServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetReportState_ SOAP
//gsoap ns1  service method-style:	GetReportState_ document
//gsoap ns1  service method-encoding:	GetReportState_ literal
//gsoap ns1  service method-input-action:	GetReportState_ http://StaticECG.koanruler.com/GetReportState
//gsoap ns1  service method-output-action:	GetReportState_ http://StaticECG.koanruler.com/GetReportStateResponse
int __ns1__GetReportState_(
    _ns1__GetReportState*               ns1__GetReportState,	///< Input parameter
    _ns1__GetReportStateResponse       &ns1__GetReportStateResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__Login_                                                            *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__Login_" of service binding "WebServiceSoap".


  - SOAP document/literal style messaging

  - Action: "http://StaticECG.koanruler.com/Login"

  - Addressing input action: "http://StaticECG.koanruler.com/Login"

  - Addressing output action: "http://StaticECG.koanruler.com/LoginResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__Login_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__Login*                        ns1__Login,
    // output parameters:
    _ns1__LoginResponse                &ns1__LoginResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__Login_(
    struct soap *soap,
    // input parameters:
    _ns1__Login*                        ns1__Login,
    // output parameters:
    _ns1__LoginResponse                &ns1__LoginResponse
  );
@endcode

C++ proxy class (defined in soapWebServiceSoapProxy.h):
@code
  class WebServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWebServiceSoapService.h):
@code
  class WebServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	Login_ SOAP
//gsoap ns1  service method-style:	Login_ document
//gsoap ns1  service method-encoding:	Login_ literal
//gsoap ns1  service method-input-action:	Login_ http://StaticECG.koanruler.com/Login
//gsoap ns1  service method-output-action:	Login_ http://StaticECG.koanruler.com/LoginResponse
int __ns1__Login_(
    _ns1__Login*                        ns1__Login,	///< Input parameter
    _ns1__LoginResponse                &ns1__LoginResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SyncPatientInfo_                                                  *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__SyncPatientInfo_" of service binding "WebServiceSoap".


  - SOAP document/literal style messaging

  - Action: "http://StaticECG.koanruler.com/SyncPatientInfo"

  - Addressing input action: "http://StaticECG.koanruler.com/SyncPatientInfo"

  - Addressing output action: "http://StaticECG.koanruler.com/SyncPatientInfoResponse"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns1__AuthHeader_

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SyncPatientInfo_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__SyncPatientInfo*              ns1__SyncPatientInfo,
    // output parameters:
    _ns1__SyncPatientInfoResponse      &ns1__SyncPatientInfoResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SyncPatientInfo_(
    struct soap *soap,
    // input parameters:
    _ns1__SyncPatientInfo*              ns1__SyncPatientInfo,
    // output parameters:
    _ns1__SyncPatientInfoResponse      &ns1__SyncPatientInfoResponse
  );
@endcode

C++ proxy class (defined in soapWebServiceSoapProxy.h):
@code
  class WebServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWebServiceSoapService.h):
@code
  class WebServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	SyncPatientInfo_ SOAP
//gsoap ns1  service method-style:	SyncPatientInfo_ document
//gsoap ns1  service method-encoding:	SyncPatientInfo_ literal
//gsoap ns1  service method-input-action:	SyncPatientInfo_ http://StaticECG.koanruler.com/SyncPatientInfo
//gsoap ns1  service method-output-action:	SyncPatientInfo_ http://StaticECG.koanruler.com/SyncPatientInfoResponse
//gsoap ns1  service method-input-header-part:	SyncPatientInfo_ ns1__AuthHeader_
int __ns1__SyncPatientInfo_(
    _ns1__SyncPatientInfo*              ns1__SyncPatientInfo,	///< Input parameter
    _ns1__SyncPatientInfoResponse      &ns1__SyncPatientInfoResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__UpdatePatientInfo_                                                *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__UpdatePatientInfo_" of service binding "WebServiceSoap".


  - SOAP document/literal style messaging

  - Action: "http://StaticECG.koanruler.com/UpdatePatientInfo"

  - Addressing input action: "http://StaticECG.koanruler.com/UpdatePatientInfo"

  - Addressing output action: "http://StaticECG.koanruler.com/UpdatePatientInfoResponse"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns1__AuthHeader_

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__UpdatePatientInfo_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__UpdatePatientInfo*            ns1__UpdatePatientInfo,
    // output parameters:
    _ns1__UpdatePatientInfoResponse    &ns1__UpdatePatientInfoResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__UpdatePatientInfo_(
    struct soap *soap,
    // input parameters:
    _ns1__UpdatePatientInfo*            ns1__UpdatePatientInfo,
    // output parameters:
    _ns1__UpdatePatientInfoResponse    &ns1__UpdatePatientInfoResponse
  );
@endcode

C++ proxy class (defined in soapWebServiceSoapProxy.h):
@code
  class WebServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWebServiceSoapService.h):
@code
  class WebServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	UpdatePatientInfo_ SOAP
//gsoap ns1  service method-style:	UpdatePatientInfo_ document
//gsoap ns1  service method-encoding:	UpdatePatientInfo_ literal
//gsoap ns1  service method-input-action:	UpdatePatientInfo_ http://StaticECG.koanruler.com/UpdatePatientInfo
//gsoap ns1  service method-output-action:	UpdatePatientInfo_ http://StaticECG.koanruler.com/UpdatePatientInfoResponse
//gsoap ns1  service method-input-header-part:	UpdatePatientInfo_ ns1__AuthHeader_
int __ns1__UpdatePatientInfo_(
    _ns1__UpdatePatientInfo*            ns1__UpdatePatientInfo,	///< Input parameter
    _ns1__UpdatePatientInfoResponse    &ns1__UpdatePatientInfoResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SyncDataState_                                                    *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__SyncDataState_" of service binding "WebServiceSoap".


  - SOAP document/literal style messaging

  - Action: "http://StaticECG.koanruler.com/SyncDataState"

  - Addressing input action: "http://StaticECG.koanruler.com/SyncDataState"

  - Addressing output action: "http://StaticECG.koanruler.com/SyncDataStateResponse"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns1__AuthHeader_

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SyncDataState_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__SyncDataState*                ns1__SyncDataState,
    // output parameters:
    _ns1__SyncDataStateResponse        &ns1__SyncDataStateResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SyncDataState_(
    struct soap *soap,
    // input parameters:
    _ns1__SyncDataState*                ns1__SyncDataState,
    // output parameters:
    _ns1__SyncDataStateResponse        &ns1__SyncDataStateResponse
  );
@endcode

C++ proxy class (defined in soapWebServiceSoapProxy.h):
@code
  class WebServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWebServiceSoapService.h):
@code
  class WebServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	SyncDataState_ SOAP
//gsoap ns1  service method-style:	SyncDataState_ document
//gsoap ns1  service method-encoding:	SyncDataState_ literal
//gsoap ns1  service method-input-action:	SyncDataState_ http://StaticECG.koanruler.com/SyncDataState
//gsoap ns1  service method-output-action:	SyncDataState_ http://StaticECG.koanruler.com/SyncDataStateResponse
//gsoap ns1  service method-input-header-part:	SyncDataState_ ns1__AuthHeader_
int __ns1__SyncDataState_(
    _ns1__SyncDataState*                ns1__SyncDataState,	///< Input parameter
    _ns1__SyncDataStateResponse        &ns1__SyncDataStateResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__UpdateDataState_                                                  *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__UpdateDataState_" of service binding "WebServiceSoap".


  - SOAP document/literal style messaging

  - Action: "http://StaticECG.koanruler.com/UpdateDataState"

  - Addressing input action: "http://StaticECG.koanruler.com/UpdateDataState"

  - Addressing output action: "http://StaticECG.koanruler.com/UpdateDataStateResponse"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns1__AuthHeader_

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__UpdateDataState_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__UpdateDataState*              ns1__UpdateDataState,
    // output parameters:
    _ns1__UpdateDataStateResponse      &ns1__UpdateDataStateResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__UpdateDataState_(
    struct soap *soap,
    // input parameters:
    _ns1__UpdateDataState*              ns1__UpdateDataState,
    // output parameters:
    _ns1__UpdateDataStateResponse      &ns1__UpdateDataStateResponse
  );
@endcode

C++ proxy class (defined in soapWebServiceSoapProxy.h):
@code
  class WebServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWebServiceSoapService.h):
@code
  class WebServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	UpdateDataState_ SOAP
//gsoap ns1  service method-style:	UpdateDataState_ document
//gsoap ns1  service method-encoding:	UpdateDataState_ literal
//gsoap ns1  service method-input-action:	UpdateDataState_ http://StaticECG.koanruler.com/UpdateDataState
//gsoap ns1  service method-output-action:	UpdateDataState_ http://StaticECG.koanruler.com/UpdateDataStateResponse
//gsoap ns1  service method-input-header-part:	UpdateDataState_ ns1__AuthHeader_
int __ns1__UpdateDataState_(
    _ns1__UpdateDataState*              ns1__UpdateDataState,	///< Input parameter
    _ns1__UpdateDataStateResponse      &ns1__UpdateDataStateResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__SyncReportState_                                                  *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__SyncReportState_" of service binding "WebServiceSoap".


  - SOAP document/literal style messaging

  - Action: "http://StaticECG.koanruler.com/SyncReportState"

  - Addressing input action: "http://StaticECG.koanruler.com/SyncReportState"

  - Addressing output action: "http://StaticECG.koanruler.com/SyncReportStateResponse"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns1__AuthHeader_

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__SyncReportState_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__SyncReportState*              ns1__SyncReportState,
    // output parameters:
    _ns1__SyncReportStateResponse      &ns1__SyncReportStateResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__SyncReportState_(
    struct soap *soap,
    // input parameters:
    _ns1__SyncReportState*              ns1__SyncReportState,
    // output parameters:
    _ns1__SyncReportStateResponse      &ns1__SyncReportStateResponse
  );
@endcode

C++ proxy class (defined in soapWebServiceSoapProxy.h):
@code
  class WebServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWebServiceSoapService.h):
@code
  class WebServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	SyncReportState_ SOAP
//gsoap ns1  service method-style:	SyncReportState_ document
//gsoap ns1  service method-encoding:	SyncReportState_ literal
//gsoap ns1  service method-input-action:	SyncReportState_ http://StaticECG.koanruler.com/SyncReportState
//gsoap ns1  service method-output-action:	SyncReportState_ http://StaticECG.koanruler.com/SyncReportStateResponse
//gsoap ns1  service method-input-header-part:	SyncReportState_ ns1__AuthHeader_
int __ns1__SyncReportState_(
    _ns1__SyncReportState*              ns1__SyncReportState,	///< Input parameter
    _ns1__SyncReportStateResponse      &ns1__SyncReportStateResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__UploadFile_                                                       *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__UploadFile_" of service binding "WebServiceSoap".


  - SOAP document/literal style messaging

  - Action: "http://StaticECG.koanruler.com/UploadFile"

  - Addressing input action: "http://StaticECG.koanruler.com/UploadFile"

  - Addressing output action: "http://StaticECG.koanruler.com/UploadFileResponse"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns1__AuthHeader_

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__UploadFile_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__UploadFile*                   ns1__UploadFile,
    // output parameters:
    _ns1__UploadFileResponse           &ns1__UploadFileResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__UploadFile_(
    struct soap *soap,
    // input parameters:
    _ns1__UploadFile*                   ns1__UploadFile,
    // output parameters:
    _ns1__UploadFileResponse           &ns1__UploadFileResponse
  );
@endcode

C++ proxy class (defined in soapWebServiceSoapProxy.h):
@code
  class WebServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWebServiceSoapService.h):
@code
  class WebServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	UploadFile_ SOAP
//gsoap ns1  service method-style:	UploadFile_ document
//gsoap ns1  service method-encoding:	UploadFile_ literal
//gsoap ns1  service method-input-action:	UploadFile_ http://StaticECG.koanruler.com/UploadFile
//gsoap ns1  service method-output-action:	UploadFile_ http://StaticECG.koanruler.com/UploadFileResponse
//gsoap ns1  service method-input-header-part:	UploadFile_ ns1__AuthHeader_
int __ns1__UploadFile_(
    _ns1__UploadFile*                   ns1__UploadFile,	///< Input parameter
    _ns1__UploadFileResponse           &ns1__UploadFileResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetQuery_                                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetQuery_" of service binding "WebServiceSoap".
 PC

  - SOAP document/literal style messaging

  - Action: "http://StaticECG.koanruler.com/GetQuery"

  - Addressing input action: "http://StaticECG.koanruler.com/GetQuery"

  - Addressing output action: "http://StaticECG.koanruler.com/GetQueryResponse"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns1__AuthHeader_

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetQuery_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetQuery*                     ns1__GetQuery,
    // output parameters:
    _ns1__GetQueryResponse             &ns1__GetQueryResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetQuery_(
    struct soap *soap,
    // input parameters:
    _ns1__GetQuery*                     ns1__GetQuery,
    // output parameters:
    _ns1__GetQueryResponse             &ns1__GetQueryResponse
  );
@endcode

C++ proxy class (defined in soapWebServiceSoapProxy.h):
@code
  class WebServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWebServiceSoapService.h):
@code
  class WebServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetQuery_ SOAP
//gsoap ns1  service method-style:	GetQuery_ document
//gsoap ns1  service method-encoding:	GetQuery_ literal
//gsoap ns1  service method-input-action:	GetQuery_ http://StaticECG.koanruler.com/GetQuery
//gsoap ns1  service method-output-action:	GetQuery_ http://StaticECG.koanruler.com/GetQueryResponse
//gsoap ns1  service method-input-header-part:	GetQuery_ ns1__AuthHeader_
int __ns1__GetQuery_(
    _ns1__GetQuery*                     ns1__GetQuery,	///< Input parameter
    _ns1__GetQueryResponse             &ns1__GetQueryResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__UpdateQuery_                                                      *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__UpdateQuery_" of service binding "WebServiceSoap".
 PC

  - SOAP document/literal style messaging

  - Action: "http://StaticECG.koanruler.com/UpdateQuery"

  - Addressing input action: "http://StaticECG.koanruler.com/UpdateQuery"

  - Addressing output action: "http://StaticECG.koanruler.com/UpdateQueryResponse"

  - Request message has mandatory header part(s) (see @ref SOAP_ENV__Header):
    - ns1__AuthHeader_

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__UpdateQuery_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__UpdateQuery*                  ns1__UpdateQuery,
    // output parameters:
    _ns1__UpdateQueryResponse          &ns1__UpdateQueryResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__UpdateQuery_(
    struct soap *soap,
    // input parameters:
    _ns1__UpdateQuery*                  ns1__UpdateQuery,
    // output parameters:
    _ns1__UpdateQueryResponse          &ns1__UpdateQueryResponse
  );
@endcode

C++ proxy class (defined in soapWebServiceSoapProxy.h):
@code
  class WebServiceSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapWebServiceSoapService.h):
@code
  class WebServiceSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	UpdateQuery_ SOAP
//gsoap ns1  service method-style:	UpdateQuery_ document
//gsoap ns1  service method-encoding:	UpdateQuery_ literal
//gsoap ns1  service method-input-action:	UpdateQuery_ http://StaticECG.koanruler.com/UpdateQuery
//gsoap ns1  service method-output-action:	UpdateQuery_ http://StaticECG.koanruler.com/UpdateQueryResponse
//gsoap ns1  service method-input-header-part:	UpdateQuery_ ns1__AuthHeader_
int __ns1__UpdateQuery_(
    _ns1__UpdateQuery*                  ns1__UpdateQuery,	///< Input parameter
    _ns1__UpdateQueryResponse          &ns1__UpdateQueryResponse	///< Output parameter
);

/**

@page WebServiceSoap Binding "WebServiceSoap"

@section WebServiceSoap_policy_enablers Policy Enablers of Binding "WebServiceSoap"

None specified.

*/

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

Data can be read in XML and deserialized from:
  - a file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->is = ...
  - a buffer, using the soap->frecv() callback

Data can be serialized in XML and written to:
  - a file descriptor, using soap->sendfd = fd
  - a socket, using soap->socket = ...
  - a C++ stream, using soap->os = ...
  - a buffer, using the soap->fsend() callback

The following options are available for (de)serialization control:
  - soap->encodingStyle = NULL; to remove SOAP 1.1/1.2 encodingStyle
  - soap_mode(soap, SOAP_XML_TREE); XML without id-ref (no cycles!)
  - soap_mode(soap, SOAP_XML_GRAPH); XML with id-ref (including cycles)
  - soap_set_namespaces(soap, struct Namespace *nsmap); to set xmlns bindings


@section ns1 Top-level root elements of schema "http://StaticECG.koanruler.com/"

  - <GetReportState> @ref _ns1__GetReportState
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetReportState(struct soap*, _ns1__GetReportState*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetReportState(struct soap*, _ns1__GetReportState*);
    @endcode

  - <GetReportStateResponse> @ref _ns1__GetReportStateResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetReportStateResponse(struct soap*, _ns1__GetReportStateResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetReportStateResponse(struct soap*, _ns1__GetReportStateResponse*);
    @endcode

  - <Login> @ref _ns1__Login
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__Login(struct soap*, _ns1__Login*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__Login(struct soap*, _ns1__Login*);
    @endcode

  - <LoginResponse> @ref _ns1__LoginResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__LoginResponse(struct soap*, _ns1__LoginResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__LoginResponse(struct soap*, _ns1__LoginResponse*);
    @endcode

  - <SyncPatientInfo> @ref _ns1__SyncPatientInfo
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SyncPatientInfo(struct soap*, _ns1__SyncPatientInfo*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SyncPatientInfo(struct soap*, _ns1__SyncPatientInfo*);
    @endcode

  - <SyncPatientInfoResponse> @ref _ns1__SyncPatientInfoResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SyncPatientInfoResponse(struct soap*, _ns1__SyncPatientInfoResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SyncPatientInfoResponse(struct soap*, _ns1__SyncPatientInfoResponse*);
    @endcode

  - <AuthHeader> (use wsdl2h option -g to auto-generate)

  - <UpdatePatientInfo> @ref _ns1__UpdatePatientInfo
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__UpdatePatientInfo(struct soap*, _ns1__UpdatePatientInfo*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__UpdatePatientInfo(struct soap*, _ns1__UpdatePatientInfo*);
    @endcode

  - <UpdatePatientInfoResponse> @ref _ns1__UpdatePatientInfoResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__UpdatePatientInfoResponse(struct soap*, _ns1__UpdatePatientInfoResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__UpdatePatientInfoResponse(struct soap*, _ns1__UpdatePatientInfoResponse*);
    @endcode

  - <SyncDataState> @ref _ns1__SyncDataState
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SyncDataState(struct soap*, _ns1__SyncDataState*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SyncDataState(struct soap*, _ns1__SyncDataState*);
    @endcode

  - <SyncDataStateResponse> @ref _ns1__SyncDataStateResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SyncDataStateResponse(struct soap*, _ns1__SyncDataStateResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SyncDataStateResponse(struct soap*, _ns1__SyncDataStateResponse*);
    @endcode

  - <UpdateDataState> @ref _ns1__UpdateDataState
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__UpdateDataState(struct soap*, _ns1__UpdateDataState*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__UpdateDataState(struct soap*, _ns1__UpdateDataState*);
    @endcode

  - <UpdateDataStateResponse> @ref _ns1__UpdateDataStateResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__UpdateDataStateResponse(struct soap*, _ns1__UpdateDataStateResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__UpdateDataStateResponse(struct soap*, _ns1__UpdateDataStateResponse*);
    @endcode

  - <SyncReportState> @ref _ns1__SyncReportState
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SyncReportState(struct soap*, _ns1__SyncReportState*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SyncReportState(struct soap*, _ns1__SyncReportState*);
    @endcode

  - <SyncReportStateResponse> @ref _ns1__SyncReportStateResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__SyncReportStateResponse(struct soap*, _ns1__SyncReportStateResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__SyncReportStateResponse(struct soap*, _ns1__SyncReportStateResponse*);
    @endcode

  - <UploadFile> @ref _ns1__UploadFile
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__UploadFile(struct soap*, _ns1__UploadFile*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__UploadFile(struct soap*, _ns1__UploadFile*);
    @endcode

  - <UploadFileResponse> @ref _ns1__UploadFileResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__UploadFileResponse(struct soap*, _ns1__UploadFileResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__UploadFileResponse(struct soap*, _ns1__UploadFileResponse*);
    @endcode

  - <GetQuery> @ref _ns1__GetQuery
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetQuery(struct soap*, _ns1__GetQuery*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetQuery(struct soap*, _ns1__GetQuery*);
    @endcode

  - <GetQueryResponse> @ref _ns1__GetQueryResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetQueryResponse(struct soap*, _ns1__GetQueryResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetQueryResponse(struct soap*, _ns1__GetQueryResponse*);
    @endcode

  - <UpdateQuery> @ref _ns1__UpdateQuery
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__UpdateQuery(struct soap*, _ns1__UpdateQuery*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__UpdateQuery(struct soap*, _ns1__UpdateQuery*);
    @endcode

  - <UpdateQueryResponse> @ref _ns1__UpdateQueryResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__UpdateQueryResponse(struct soap*, _ns1__UpdateQueryResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__UpdateQueryResponse(struct soap*, _ns1__UpdateQueryResponse*);
    @endcode

*/

/* End of clientservice.h */
